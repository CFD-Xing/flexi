# =========================================================================
# Add the libraries
# =========================================================================

# =========================================================================
# MPI
# =========================================================================
OPTION(LIBS_USE_MPI "Compile SINGLE or MPI version" ON)
IF(LIBS_USE_MPI)
  FIND_PACKAGE(MPI REQUIRED)
  IF (NOT MPI_Fortran_NO_INTERROGATE)
    FOREACH(DIR ${MPI_INCLUDE_PATH})
      INCLUDE_DIRECTORIES(${DIR})
    ENDFOREACH()
    FOREACH(DIR ${MPI_Fortran_INCLUDE_PATH})
      INCLUDE_DIRECTORIES(${DIR})
    ENDFOREACH()
    LIST(APPEND linkedlibs ${MPI_Fortran_LIBRARIES})
  ENDIF()
  MARK_AS_ADVANCED(MPI_LIBRARY MPI_EXTRA_LIBRARY) # don't show these ones
  MESSAGE(STATUS "Building Flexi with MPI")
  MESSAGE(STATUS "MPI Compiler: " ${MPI_Fortran_COMPILER})
  ADD_DEFINITIONS(-DUSE_MPI=1)
ELSE()
  ADD_DEFINITIONS(-DUSE_MPI=0)
ENDIF()


# =========================================================================
# HDF5 library
# =========================================================================
SET(LIBS_BUILD_HDF5 ON  CACHE BOOL "Compile and build hdf5 library")
SET(LIB_TYPE STATIC) # OR SHARED
STRING(TOLOWER ${LIB_TYPE} SEARCH_TYPE)

IF(LIBS_USE_MPI)
  SET(FLEXI_EXTERNAL_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/${CMAKE_Fortran_COMPILER_ID}-MPI)
ELSE()
  SET(FLEXI_EXTERNAL_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/${CMAKE_Fortran_COMPILER_ID})
ENDIF()
MARK_AS_ADVANCED(FLEXI_EXTERNAL_LIB_DIR)

# We support two methods for finding HDF5:
# the version built using configure scripts and using CMake
# Support for CMake-built HDF5 is limited to version >1.10.2
# which require at CMake >3.10
# Recommendations: use configure version if possible

IF(NOT LIBS_BUILD_HDF5)
  SET(FLEXI_HDF5_CMAKE TRUE) # try to find the CMake version
  FIND_PACKAGE(HDF5 NAMES hdf5 COMPONENTS C Fortran ${SEARCH_TYPE} QUIET PATH_SUFFIXES share/cmake )
  IF (HDF5_FOUND)
    IF(${CMAKE_VERSION} VERSION_LESS "3.10.0")
      MESSAGE (WARNING "HDF5 built with CMake was found! This feature is only supported for CMake 3.10+ and HDF5 1.10.2+ !")
    ENDIF()
    MESSAGE (STATUS "HDF5 C libs:${HDF5_FOUND} static:${HDF5_static_C_FOUND} and shared:${HDF5_shared_C_FOUND}")
    MESSAGE (STATUS "HDF5 Fortran libs: static:${HDF5_static_Fortran_FOUND} and shared:${HDF5_shared_Fortran_FOUND}")
    MESSAGE (STATUS "h5diff found:${HDF5_DIFF_EXECUTABLE}")
  ELSE()
    SET(FLEXI_HDF5_CMAKE FALSE) # try to find the configure version
    FIND_PACKAGE(HDF5 COMPONENTS C Fortran)
  ENDIF()

  mark_as_advanced([CLEAR|FORCE] HDF5_DIR)
ELSE()
  # =========================================================================
  # Check whether we are on Github or at IAG
  # =========================================================================
  EXECUTE_PROCESS(COMMAND git ls-remote --get-url OUTPUT_VARIABLE GIT_ORIGIN)
  STRING(FIND "${GIT_ORIGIN}" ".iag.uni-stuttgart.de" HOMERUN)
  STRING(FIND "${GIT_ORIGIN}" "git@" USESSH)
#Test
  SET (HOMERUN -1)
  IF (HOMERUN GREATER -1)
    IF(USESSH EQUAL 0)
      SET(FLEXI_DLPATH "git@gitlab.iag.uni-stuttgart.de:")
    ELSE()
      SET(FLEXI_DLPATH "https://gitlabext.iag.uni-stuttgart.de/")
    ENDIF()
    SET (HDF5DOWNLOAD ${FLEXI_DLPATH}libs/hdf5.git )
  ELSE()
    IF(USESSH EQUAL 0)
      SET(FLEXI_DLPATH "git@github.com:flexi-framework")
    ELSE()
      SET(FLEXI_DLPATH "https://github.com/flexi-framework")
    ENDIF()
    #SET (HDF5DOWNLOAD https://bitbucket.hdfgroup.org/scm/hdffv/hdf5.git )
    SET (HDF5DOWNLOAD "https://github.com/HDFGroup/hdf5.git")
  ENDIF()
  SET (HDF5_DOWNLOAD ${HDF5DOWNLOAD} CACHE STRING "HDF5 Download-link")
  mark_as_advanced([CLEAR|FORCE] HDF5_DOWNLOAD)

  #SET HDF5_TAG dependend on MPI Version
  IF(LIBS_USE_MPI)
    IF (${MPI_Fortran_VERSION} VERSION_LESS "4.0.0")
      SET (HDF5_TAG "hdf5-1_10_5" CACHE STRING "HDF5 version tag")
    ELSE()
      SET (HDF5_TAG "hdf5-1_12_0" CACHE STRING "HDF5 version tag")
    ENDIF()
  ELSE()
    SET (HDF5_TAG "hdf5-1_12_0" CACHE STRING "HDF5 version tag")
  ENDIF()
  mark_as_advanced([CLEAR|FORCE] HDF5_TAG)


  SET(FLEXI_HDF5_DLDIR ${FLEXI_EXTERNAL_LIB_DIR}/HDF5)
  SET(FLEXI_HDF5_DIR  ${FLEXI_HDF5_DLDIR}/build)
  IF (NOT EXISTS "${FLEXI_HDF5_DIR}/lib/libhdf5.a")
    IF(FLEXI_MPI)
      SET(FLEXI_HDF5PARALLEL --enable-parallel)
      SET(FLEXI_HDF5FC ${MPI_Fortran_COMPILER})
      SET(FLEXI_HDF5CC ${MPI_C_COMPILER})
    ELSE()
      UNSET(FLEXI_HDF5PARALLEL)
      SET(FLEXI_HDF5FC ${CMAKE_Fortran_COMPILER})
      SET(FLEXI_HDF5CC ${CMAKE_C_COMPILER} )
    ENDIF()
    #NOTE: old 1.8.X versions of HDF5 require additional flag --enable-fortran2003
    ExternalProject_Add(HDF5
      GIT_REPOSITORY ${HDF5_DOWNLOAD}
      GIT_TAG ${HDF5_TAG}
      ${${GITSHALLOW}}
      PREFIX ${FLEXI_HDF5_DIR}
      UPDATE_COMMAND ""
      CONFIGURE_COMMAND FC=${FLEXI_HDF5FC} CC=${FLEXI_HDF5CC} ${FLEXI_HDF5_DIR}/src/HDF5/configure --prefix=${FLEXI_HDF5_DIR} --with-pic --enable-fortran ${FLEXI_HDF5PARALLEL} --libdir=${FLEXI_HDF5_DIR}/lib
      BUILD_COMMAND ${MAKE}
    )
    LIST(APPEND SELFBUILTEXTERNALS HDF5)
    # CMake HDF5 is fast but not that reliable
    #ExternalProject_Add(HDF5
    #  GIT_REPOSITORY ${HDF5DOWNLOAD}
    #  GIT_TAG ${HDF5_TAG}
    #  PREFIX ${FLEXI_HDF5_DIR}
    #  UPDATE_COMMAND ""
    #  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${FLEXI_HDF5_DIR} -DCMAKE_C_COMPILER=${FLEXI_HDF5CC} -DCMAKE_Fortran_COMPILER=${FLEXI_HDF5FC} -DBUILD-TESTING=OFF -DHDF5_BUILD_EXAMPLES=OFF -DHDF5_BUILD_TOOLS=OFF -DHDF5_BUILD_FORTRAN=ON -DHDF5_ENABLE_PARALLEL=ON
    #  BUILD_COMMAND ${MAKE}
    #)
  ENDIF()

  SET(FLEXI_HDF5_CMAKE FALSE)
  SET(HDF5_hdf5_LIBRARY_RELEASE         ${FLEXI_HDF5_DIR}/lib/libhdf5.a)
  SET(HDF5_hdf5_fortran_LIBRARY_RELEASE ${FLEXI_HDF5_DIR}/lib/libhdf5_fortran.a)
  SET(HDF5_C_INCLUDE_DIR                ${FLEXI_HDF5_DIR}/include)
  SET(HDF5_Fortran_INCLUDE_DIR          ${FLEXI_HDF5_DIR}/include)
  UNSET(HDF5_LIBRARIES)
  UNSET(HDF5_INCLUDE_DIR_FORTRAN)
  UNSET(HDF5_INCLUDE_DIR)
  UNSET(HDF5_DIFF_EXECUTABLE)
  SET(HDF5_DIFF_EXECUTABLE              ${FLEXI_HDF5_DIR}/bin/h5diff)
  LIST(APPEND HDF5_INCLUDE_DIR_FORTRAN ${HDF5_Fortran_INCLUDE_DIR} ${HDF5_C_INCLUDE_DIR})
  LIST(APPEND HDF5_INCLUDE_DIR  ${HDF5_C_INCLUDE_DIR})
  mark_as_advanced([CLEAR|FORCE] HDF5_z_LIBRARY_RELEASE)
  FIND_LIBRARY(HDF5_z_LIBRARY_RELEASE z)
  LIST(APPEND HDF5_LIBRARIES ${HDF5_hdf5_fortran_LIBRARY_RELEASE} ${HDF5_hdf5_LIBRARY_RELEASE} ${HDF5_z_LIBRARY_RELEASE} -ldl)
ENDIF()

IF(FLEXI_HDF5_CMAKE)
  INCLUDE_DIRECTORIES(${HDF5_INCLUDE_DIR} ${HDF5_INCLUDE_DIR_FORTRAN})
  LIST(APPEND linkedlibs ${HDF5_C_${LIB_TYPE}_LIBRARY} ${HDF5_FORTRAN_${LIB_TYPE}_LIBRARY} )
ELSE()
  INCLUDE_DIRECTORIES (${HDF5_INCLUDE_DIR_FORTRAN} ${HDF5_INCLUDE_DIR})
  MESSAGE(STATUS "Found HDF5 Libs: " ${HDF5_LIBRARIES})
  LIST(APPEND linkedlibs ${HDF5_LIBRARIES} )
ENDIF()

# =========================================================================
# LAPACK/MKL library
# =========================================================================
# use Lapack/Blas for GNU
MESSAGE(STATUS "Using BLAS/Lapack library")
OPTION(LIBS_USE_MKL "Use MKL libraries instead of BLAS/LAPACK" OFF)
IF (LIBS_USE_MKL)
  SET(BLA_VENDOR "Intel") #search only for Intel BLAS (=MKL)
ENDIF()
FIND_PACKAGE(LAPACK QUIET)
IF (LAPACK_FOUND)
  LIST(APPEND linkedlibs ${LAPACK_LIBRARIES})
ENDIF()


# ========================================================================= 
# PAPI library 
# ========================================================================= 
OPTION(LIBS_USE_PAPI "Use PAPI library to perform performance measurements (e.g. flop counts)." OFF)
IF(LIBS_USE_PAPI)
  FIND_PACKAGE(PAPI REQUIRED)
  ADD_DEFINITIONS(-DPAPI) 
  LIST(APPEND linkedlibs ${PAPI_LIBRARIES})
  INCLUDE_DIRECTORIES(${PAPI_INCLUDE_DIRS})
  MESSAGE(STATUS "Building Flexi with PAPI benchmark support.") 
ENDIF()


# ========================================================================= 
# OPENMP library
# ========================================================================= 
OPTION(LIBS_USE_OPENMP "Enable OpenMP" OFF)
IF(LIBS_USE_OPENMP)
  IF ("${CMAKE_VERSION}" VERSION_LESS 3.1.0)
    MESSAGE(WARNING "For finding OpenMP Fortran flags at least CMake version 3.1.0 is required. Please specify flags manually or use newer CMake version.")
  ENDIF()
  FIND_PACKAGE(OpenMP REQUIRED)
  SET (CMAKE_Fortran_FLAGS_DEBUG   "${CMAKE_Fortran_FLAGS_DEBUG}   ${OpenMP_Fortran_FLAGS}")
  SET (CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE} ${OpenMP_Fortran_FLAGS}")
  SET (CMAKE_CXX_FLAGS_DEBUG       "${CMAKE_CXX_FLAGS_DEBUG}       ${OpenMP_CXX_FLAGS}")
  SET (CMAKE_CXX_FLAGS_RELEASE     "${CMAKE_CXX_FLAGS_RELEASE}     ${OpenMP_CXX_FLAGS}")
  SET (CMAKE_EXE_LINKER_FLAGS      "${CMAKE_EXE_LINKER_FLAGS}      ${OpenMP_EXE_LINKER_FLAGS}")
ENDIF()

